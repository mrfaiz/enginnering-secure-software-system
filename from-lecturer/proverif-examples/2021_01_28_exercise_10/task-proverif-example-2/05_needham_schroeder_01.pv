(* asymmetric encryption, key always first argument *)

type skey.
type pkey.

fun pk(skey): pkey.
fun aenc(pkey, bitstring): bitstring.

reduc forall m: bitstring, sk: skey; adec(sk, aenc(pk(sk), m)) = m.

free c:channel.

free FAIL:bitstring [private].

query attacker(FAIL).

let clientInitiator(pkA:pkey, skA:skey, pkB:pkey) =
   
   (* Step 1: A->B: enc^a_{pkB}(pkA, N_A) (use pkA instead of A to represent Alice's identity) *)
   
   new NA: bitstring;
   out(c, aenc(pkB, (pkA, NA)));
   
   (* Step 2: Alice expects enc^a_{k_A}(N_A, x)
                    replies enc^a_{K_B}(x) *)
                 
   in(c, y:bitstring);
   let (=NA, x:bitstring) = adec(skA, y) in
     out(c, aenc(pkB, x)).
     
let clientResponder(pkB: pkey, skB: skey, pkA: pkey) =

   (* Step 1: Bob expects enc^a_{pkB}(pkA, x) 
                  replies enc^a_{pkA}(x, NB)  *)
   
   in (c, y:bitstring);
   let (=pkA, x:bitstring) = adec(skB, y) in
     new NB: bitstring;
     out(c, aenc(pkA, (x, NB)));
     
  (* Step 2: (break-rule): If Bob receives pair (NA, NB), attack was successful *)
     in (c, z: bitstring);
     let (=x, =NB) = z in
       out (c, FAIL).
     

process
  new skA:skey;
  new skB:skey;
  new skC:skey;
  let pkA = pk(skA) in
    let pkB = pk(skB) in
      let pkC = pk(skC) in 
        out (c,pkA);
        out (c,pkB);
        out (c,skC);
        clientInitiator(pkA, skA, pkB) | clientResponder(pkB, skB, pkA)
        

(* weak_secret.pv: Weak Secrets in ProVerif *)

free c: channel.

(* Depending on whether you want asymmetric encryption with or without randomization, un-comment one of the
   two implementations. These cryptographic primitives are not built in, so the specification does not compile
   without un-commenting one of them. *)
   
(* Asymmetric key encryption with randomization *)

(* 
type skey.
type pkey.
type coins.
fun pk (skey): pkey.
fun internalaenc(bitstring, pkey, coins): bitstring.

reduc forall m:bitstring, k:skey, r:coins; adec(internalaenc(m,pk(k),r),k)=m.

letfun aenc(x:bitstring, y:pkey) = new r:coins; internalaenc(x,y,r).

reduc forall m:bitstring, pk:pkey, r:coins; getkey(internalaenc(m,pk,r))=pk. *)

(* Asymmetric key encryption without randomization *)


(* type skey.
type pkey.

fun pk(skey): pkey.
fun aenc(bitstring, pkey): bitstring.

reduc forall m: bitstring, sk: skey; adec(aenc(m,pk(sk)),sk) = m. *)


free v: bitstring [private].
weaksecret v.
query attacker(v). 

let V(pkA:pkey) = out(c, aenc(v, pkA)).

let A(skA:skey) = in(c,x:bitstring); let v' = adec(x, skA) in 0.

process 
	new skA: skey;
	let pkA = pk(skA) in
	out(c, pkA);
	! (V(pkA) | A(skA))

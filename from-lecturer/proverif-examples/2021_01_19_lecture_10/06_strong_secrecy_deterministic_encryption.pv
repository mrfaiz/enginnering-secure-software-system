(* strong_secrecy_deterministic_encryption.pv: Attempting Strong Secrecy with Deterministic (non-randomized) Public-Key Encryption in ProVerif *)

(* Asymmetric key encryption *)

type skey.
type pkey.
fun pk(skey): pkey.
fun aenc(bitstring, pkey): bitstring.
reduc forall m: bitstring, sk: skey; adec(aenc(m,pk(sk)),sk) = m.

free yes:bitstring[private].
free no:bitstring[private].

free c: channel.

let clientAlice(which:bool, pkB:pkey) =
    if which then
       out(c, aenc(yes, pkB))
    else
       out(c, aenc(no, pkB)).
    

process
     new skB:skey;
	 let pkB = pk(skB) in 
	 out(c,pkB);
	 out(c, yes);
	 out(c, no);
     clientAlice(choice[true,false], pkB)
  
(* 
aenc(yes, pkB) and aenc(no, pkB) are distinguishable: perform encryption yourself, compare.

*)
